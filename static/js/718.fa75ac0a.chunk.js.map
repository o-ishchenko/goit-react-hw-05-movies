{"version":3,"file":"static/js/718.fa75ac0a.chunk.js","mappings":"uOACA,EAAuB,wBAAvB,EAAwD,0BAAxD,EAA0F,yBAA1F,EAA2H,yB,SCsC3H,MAnCA,YAAkC,IAAbA,EAAY,EAAZA,SACnB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAgBA,OACE,kBAAMC,UAAWC,EAAQL,SAXN,SAAAM,GACnBA,EAAMC,iBACqB,KAAvBL,EAAYM,QAIhBR,EAASE,GACTC,EAAe,KAJbM,EAAAA,GAAAA,KAAW,mCAQb,WACE,kBACEL,UAAWC,EACXK,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,MAAOZ,EACPa,SAvBoB,SAAAT,GACxBH,EAAeG,EAAMU,cAAcF,MAAMG,mBAwBvC,mBAAQP,KAAK,SAASN,UAAWC,EAAjC,UACE,iBAAMD,UAAWC,EAAjB,0B,oBCwBR,MAlDA,WAAuB,IAAD,EACpB,GAAwCa,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsCnB,EAAAA,EAAAA,UAAQ,UAC5CkB,EAAaE,IAAI,gBAD2B,QACf,IAD/B,eAAOnB,EAAP,KAAoBC,EAApB,KAGA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOqB,EAAP,KAAaC,EAAb,KACA,GAA8BtB,EAAAA,EAAAA,WAAS,GAAvC,eAAOuB,EAAP,KAAgBC,EAAhB,KACMC,GAAWC,EAAAA,EAAAA,MAwBjB,OAhBAC,EAAAA,EAAAA,YAAU,WACH1B,IAGLuB,GAAW,GACXI,EAAAA,GAA0C3B,GAAa4B,MAAK,SAAAR,GACtC,IAAhBA,EAAKS,QACPtB,EAAAA,GAAAA,KAAA,oCAC+BP,EAD/B,gCAIFqB,EAAQD,GACRG,GAAW,SAEZ,CAACvB,KAGF,iCACE,SAAC,EAAD,CAAWF,SAxBU,SAAAE,GACvBC,EAAeD,GACfkB,EAAgB,CAAEY,MAAO9B,IACzBqB,EAAQ,OAsBLC,IAAW,SAACS,EAAA,EAAD,IACXX,IACC,wBACGA,EAAKY,KAAI,SAAAZ,GAAI,OACZ,yBACE,SAAC,KAAD,CAAMa,GAAE,UAAKb,EAAKc,IAAMC,MAAO,CAAEC,KAAMZ,GAAvC,SACGJ,EAAKiB,MAAQjB,EAAKiB,MAAQjB,EAAKkB,QAF3BlB,EAAKc,c,0MC5C1BK,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBF,IAAAA,IAAA,oCACQC,EADR,yBADlB,cACCE,EADD,yBAIEA,EAAStB,KAAKuB,SAJhB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAwC5C,GAAxC,uFACkBuC,IAAAA,IAAA,gCACIC,EADJ,kBACqBxC,EADrB,gCADlB,cACC0C,EADD,yBAIEA,EAAStB,KAAKuB,SAJhB,kEAOA,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA8BX,GAA9B,uFACkBK,IAAAA,IAAA,iBAAoBL,EAApB,oBAAkCM,IADpD,cACCE,EADD,yBAEEA,EAAStB,MAFX,kEAKA,SAAe0B,EAAtB,+CAAO,OAAP,oBAAO,WAAgCZ,GAAhC,uFACkBK,IAAAA,IAAA,iBACXL,EADW,4BACWM,EADX,oBADlB,cACCE,EADD,yBAIEA,EAAStB,KAAK2B,MAJhB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4Bd,GAA5B,uFACkBK,IAAAA,IAAA,iBACXL,EADW,4BACWM,EADX,oBADlB,cACCE,EADD,yBAIEA,EAAStB,KAAKuB,SAJhB","sources":["webpack://goit-react-hw-05-movies/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.js","pages/MoviesPage.js","services/api-movies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Searchbar_form__D-hp5\",\"button\":\"Searchbar_button__nkcjk\",\"label\":\"Searchbar_label__BRcTT\",\"input\":\"Searchbar_input__19umw\"};","import { useState } from 'react';\nimport s from './Searchbar.module.css';\nimport { toast } from 'react-toastify';\n\nfunction Searchbar({ onSubmit }) {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleQueryChange = event => {\n    setSearchQuery(event.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (searchQuery.trim() === '') {\n      toast.info('Enter your query for searching');\n      return;\n    }\n    onSubmit(searchQuery);\n    setSearchQuery('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <input\n        className={s.input}\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        placeholder=\"Search films\"\n        value={searchQuery}\n        onChange={handleQueryChange}\n      />\n      <button type=\"submit\" className={s.button}>\n        <span className={s.label}>Search</span>\n      </button>\n    </form>\n  );\n}\n\nexport default Searchbar;\n","import { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams, Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport Searchbar from 'components/Searchbar';\nimport Loader from 'components/Loader';\nimport * as moviesSearch_API from '../services/api-movies';\n\nfunction MoviesPage() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchQuery, setSearchQuery] = useState(\n    searchParams.get('query') ?? ''\n  );\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n\n  const handleFormSubmit = searchQuery => {\n    setSearchQuery(searchQuery);\n    setSearchParams({ query: searchQuery });\n    setData([]);\n  };\n\n  useEffect(() => {\n    if (!searchQuery) {\n      return;\n    }\n    setLoading(true);\n    moviesSearch_API.fetchMoviesBySearchQuery(searchQuery).then(data => {\n      if (data.length === 0) {\n        toast.info(\n          `We did not find the movie ${searchQuery}. Please, try another movie`\n        );\n      }\n      setData(data);\n      setLoading(false);\n    });\n  }, [searchQuery]);\n\n  return (\n    <>\n      <Searchbar onSubmit={handleFormSubmit} />\n      {loading && <Loader />}\n      {data && (\n        <ul>\n          {data.map(data => (\n            <li key={data.id}>\n              <Link to={`${data.id}`} state={{ from: location }}>\n                {data.title ? data.title : data.name}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nexport default MoviesPage;\n","import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '3f733d367aa88a68e8778536d460fad2';\n\nexport async function fetchTrendingMovies() {\n  const response = await axios.get(\n    `/trending/all/day?api_key=${API_KEY}&include_adult=false`\n  );\n  return response.data.results;\n}\n\nexport async function fetchMoviesBySearchQuery(searchQuery) {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${searchQuery}&page=1&include_adult=false`\n  );\n  return response.data.results;\n}\n\nexport async function fetchMovieById(id) {\n  const response = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return response.data;\n}\n\nexport async function fetchMovieActors(id) {\n  const response = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n}\n\nexport async function fetchReviews(id) {\n  const response = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.results;\n}\n"],"names":["onSubmit","useState","searchQuery","setSearchQuery","className","s","event","preventDefault","trim","toast","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","useSearchParams","searchParams","setSearchParams","get","data","setData","loading","setLoading","location","useLocation","useEffect","moviesSearch_API","then","length","query","Loader","map","to","id","state","from","title","name","axios","API_KEY","fetchTrendingMovies","response","results","fetchMoviesBySearchQuery","fetchMovieById","fetchMovieActors","cast","fetchReviews"],"sourceRoot":""}